//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5466
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;



public partial class ProjectManagementDataContext : Microsoft.SharePoint.Linq.DataContext {
	
	#region Extensibility Method Definitions
	partial void OnCreated();
	#endregion
	
	public ProjectManagementDataContext(string requestUrl) : 
			base(requestUrl) {
		this.OnCreated();
	}
	
	[Microsoft.SharePoint.Linq.ListAttribute(Name="Languages")]
	public Microsoft.SharePoint.Linq.EntityList<LanguagesItem> Languages {
		get {
			return this.GetList<LanguagesItem>("Languages");
		}
	}
	
	[Microsoft.SharePoint.Linq.ListAttribute(Name="Product Categories")]
	public Microsoft.SharePoint.Linq.EntityList<Item> ProductCategories {
		get {
			return this.GetList<Item>("Product Categories");
		}
	}
	
	[Microsoft.SharePoint.Linq.ListAttribute(Name="Products")]
	public Microsoft.SharePoint.Linq.EntityList<ProductsItem> Products {
		get {
			return this.GetList<ProductsItem>("Products");
		}
	}
	
	[Microsoft.SharePoint.Linq.ListAttribute(Name="Project Issues")]
	public Microsoft.SharePoint.Linq.EntityList<ProjectIssuesItem> ProjectIssues {
		get {
			return this.GetList<ProjectIssuesItem>("Project Issues");
		}
	}
	
	[Microsoft.SharePoint.Linq.ListAttribute(Name="Project Milestones")]
	public Microsoft.SharePoint.Linq.EntityList<ProjectMilestonesItem> ProjectMilestones {
		get {
			return this.GetList<ProjectMilestonesItem>("Project Milestones");
		}
	}
	
	[Microsoft.SharePoint.Linq.ListAttribute(Name="Project Tasks")]
	public Microsoft.SharePoint.Linq.EntityList<Item> ProjectTasks {
		get {
			return this.GetList<Item>("Project Tasks");
		}
	}
	
	[Microsoft.SharePoint.Linq.ListAttribute(Name="Projects List")]
	public Microsoft.SharePoint.Linq.EntityList<ProjectsListItem> ProjectsList {
		get {
			return this.GetList<ProjectsListItem>("Projects List");
		}
	}
	
	[Microsoft.SharePoint.Linq.ListAttribute(Name="Sandbox")]
	public Microsoft.SharePoint.Linq.EntityList<Document> Sandbox {
		get {
			return this.GetList<Document>("Sandbox");
		}
	}
	
	/// <summary>
	/// Use this library to store files which are included on pages within this site, such as images on Wiki pages.
	/// </summary>
	[Microsoft.SharePoint.Linq.ListAttribute(Name="Site Assets")]
	public Microsoft.SharePoint.Linq.EntityList<Document> SiteAssets {
		get {
			return this.GetList<Document>("Site Assets");
		}
	}
	
	/// <summary>
	/// Use this library to create and store pages on this site.
	/// </summary>
	[Microsoft.SharePoint.Linq.ListAttribute(Name="Site Pages")]
	public Microsoft.SharePoint.Linq.EntityList<WikiPage> SitePages {
		get {
			return this.GetList<WikiPage>("Site Pages");
		}
	}
	
	/// <summary>
	/// Use the Tasks list to keep track of work that you or your team needs to complete. 
	/// </summary>
	[Microsoft.SharePoint.Linq.ListAttribute(Name="Tasks")]
	public Microsoft.SharePoint.Linq.EntityList<Item> Tasks {
		get {
			return this.GetList<Item>("Tasks");
		}
	}
	
	[Microsoft.SharePoint.Linq.ListAttribute(Name="Translations")]
	public Microsoft.SharePoint.Linq.EntityList<TranslationsItem> Translations {
		get {
			return this.GetList<TranslationsItem>("Translations");
		}
	}
}

/// <summary>
/// Create a new list item.
/// </summary>
[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Item", Id="0x01")]
[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(LanguagesItem))]
[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(Folder))]
[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(ProductsItem))]
[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(ProjectIssuesItem))]
[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(ProjectMilestonesItem))]
[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(Task))]
[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(ProjectsListItem))]
[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(Document))]
[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(TranslationsItem))]
public partial class Item : Microsoft.SharePoint.Linq.ITrackEntityState, Microsoft.SharePoint.Linq.ITrackOriginalValues, System.ComponentModel.INotifyPropertyChanged, System.ComponentModel.INotifyPropertyChanging {
	
	private System.Nullable<int> _id;
	
	private System.Nullable<int> _version;
	
	private string _path;
	
	private Microsoft.SharePoint.Linq.EntityState _entityState;
	
	private System.Collections.Generic.IDictionary<string, object> _originalValues;
	
	private string _title;
	
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate();
	partial void OnCreated();
	#endregion

	Microsoft.SharePoint.Linq.EntityState Microsoft.SharePoint.Linq.ITrackEntityState.EntityState {
		get {
			return this._entityState;
		}
		set {
			if ((value != this._entityState)) {
				this._entityState = value;
			}
		}
	}

	System.Collections.Generic.IDictionary<string, object> Microsoft.SharePoint.Linq.ITrackOriginalValues.OriginalValues {
		get {
			if ((null == this._originalValues)) {
				this._originalValues = new System.Collections.Generic.Dictionary<string, object>();
			}
			return this._originalValues;
		}
	}
	
	public Item() {
		this.OnCreated();
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="ID", Storage="_id", ReadOnly=true, FieldType="Counter")]
	public System.Nullable<int> Id {
		get {
			return this._id;
		}
		set {
			if ((value != this._id)) {
				this.OnPropertyChanging("Id", this._id);
				this._id = value;
				this.OnPropertyChanged("Id");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="owshiddenversion", Storage="_version", ReadOnly=true, FieldType="Integer")]
	public System.Nullable<int> Version {
		get {
			return this._version;
		}
		set {
			if ((value != this._version)) {
				this.OnPropertyChanging("Version", this._version);
				this._version = value;
				this.OnPropertyChanged("Version");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="FileDirRef", Storage="_path", ReadOnly=true, FieldType="Lookup", IsLookupValue=true)]
	public string Path {
		get {
			return this._path;
		}
		set {
			if ((value != this._path)) {
				this.OnPropertyChanging("Path", this._path);
				this._path = value;
				this.OnPropertyChanged("Path");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Title", Storage="_title", Required=true, FieldType="Text")]
	public virtual string Title {
		get {
			return this._title;
		}
		set {
			if ((value != this._title)) {
				this.OnPropertyChanging("Title", this._title);
				this._title = value;
				this.OnPropertyChanged("Title");
			}
		}
	}
	
	public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
	
	public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
	
	protected virtual void OnPropertyChanged(string propertyName) {
		if ((null != this.PropertyChanged)) {
			this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
		}
	}
	
	protected virtual void OnPropertyChanging(string propertyName, object value) {
		if ((null == this._originalValues)) {
			this._originalValues = new System.Collections.Generic.Dictionary<string, object>();
		}
		if ((false == this._originalValues.ContainsKey(propertyName))) {
			this._originalValues.Add(propertyName, value);
		}
		if ((null != this.PropertyChanging)) {
			this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
		}
	}
}

/// <summary>
/// Create a new folder.
/// </summary>
[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Folder", Id="0x0120")]
[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(SummaryTask))]
public partial class Folder : Item {
	
	private string _name;
	
	private System.Nullable<int> _itemChildCountId;
	
	private string _itemChildCountItemChildCount;
	
	private System.Nullable<int> _folderChildCountId;
	
	private string _folderChildCountFolderChildCount;
	
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate();
	partial void OnCreated();
	#endregion
	
	public Folder() {
		this.OnCreated();
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="FileLeafRef", Storage="_name", Required=true, FieldType="File")]
	public string Name {
		get {
			return this._name;
		}
		set {
			if ((value != this._name)) {
				this.OnPropertyChanging("Name", this._name);
				this._name = value;
				this.OnPropertyChanged("Name");
			}
		}
	}
	
	[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
	[Microsoft.SharePoint.Linq.RemovedColumnAttribute()]
	public override string Title {
		get {
			throw new System.InvalidOperationException("Field Title was removed from content type Folder.");
		}
		set {
			throw new System.InvalidOperationException("Field Title was removed from content type Folder.");
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="ItemChildCount", Storage="_itemChildCountId", ReadOnly=true, FieldType="Lookup", IsLookupId=true)]
	public System.Nullable<int> ItemChildCountId {
		get {
			return this._itemChildCountId;
		}
		set {
			if ((value != this._itemChildCountId)) {
				this.OnPropertyChanging("ItemChildCountId", this._itemChildCountId);
				this._itemChildCountId = value;
				this.OnPropertyChanged("ItemChildCountId");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="ItemChildCount", Storage="_itemChildCountItemChildCount", ReadOnly=true, FieldType="Lookup", IsLookupValue=true)]
	public string ItemChildCountItemChildCount {
		get {
			return this._itemChildCountItemChildCount;
		}
		set {
			if ((value != this._itemChildCountItemChildCount)) {
				this.OnPropertyChanging("ItemChildCountItemChildCount", this._itemChildCountItemChildCount);
				this._itemChildCountItemChildCount = value;
				this.OnPropertyChanged("ItemChildCountItemChildCount");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="FolderChildCount", Storage="_folderChildCountId", ReadOnly=true, FieldType="Lookup", IsLookupId=true)]
	public System.Nullable<int> FolderChildCountId {
		get {
			return this._folderChildCountId;
		}
		set {
			if ((value != this._folderChildCountId)) {
				this.OnPropertyChanging("FolderChildCountId", this._folderChildCountId);
				this._folderChildCountId = value;
				this.OnPropertyChanged("FolderChildCountId");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="FolderChildCount", Storage="_folderChildCountFolderChildCount", ReadOnly=true, FieldType="Lookup", IsLookupValue=true)]
	public string FolderChildCountFolderChildCount {
		get {
			return this._folderChildCountFolderChildCount;
		}
		set {
			if ((value != this._folderChildCountFolderChildCount)) {
				this.OnPropertyChanging("FolderChildCountFolderChildCount", this._folderChildCountFolderChildCount);
				this._folderChildCountFolderChildCount = value;
				this.OnPropertyChanged("FolderChildCountFolderChildCount");
			}
		}
	}
}

/// <summary>
/// Track a work item that you or your team needs to complete.
/// </summary>
[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Task", Id="0x0108")]
[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(ProjectTasksTask))]
[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(TasksTask))]
public partial class Task : Item {
	
	private System.Nullable<double> _complete;
	
	private string _body;
	
	private System.Nullable<System.DateTime> _startDate;
	
	protected System.Nullable<System.DateTime> _dueDate;
	
	private System.Nullable<Priority> _priority;
	
	protected System.Nullable<TaskStatus> _taskStatus;
	
	private System.Nullable<int> _assignedToId;
	
	private string _assignedTo;
	
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate();
	partial void OnCreated();
	#endregion
	
	public Task() {
		this.OnCreated();
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="PercentComplete", Storage="_complete", FieldType="Number")]
	public System.Nullable<double> Complete {
		get {
			return this._complete;
		}
		set {
			if ((value != this._complete)) {
				this.OnPropertyChanging("Complete", this._complete);
				this._complete = value;
				this.OnPropertyChanged("Complete");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Body", Storage="_body", FieldType="Note")]
	public string Body {
		get {
			return this._body;
		}
		set {
			if ((value != this._body)) {
				this.OnPropertyChanging("Body", this._body);
				this._body = value;
				this.OnPropertyChanged("Body");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="StartDate", Storage="_startDate", FieldType="DateTime")]
	public System.Nullable<System.DateTime> StartDate {
		get {
			return this._startDate;
		}
		set {
			if ((value != this._startDate)) {
				this.OnPropertyChanging("StartDate", this._startDate);
				this._startDate = value;
				this.OnPropertyChanged("StartDate");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="TaskDueDate", Storage="_dueDate", FieldType="DateTime")]
	public virtual System.Nullable<System.DateTime> DueDate {
		get {
			return this._dueDate;
		}
		set {
			if ((value != this._dueDate)) {
				this.OnPropertyChanging("DueDate", this._dueDate);
				this._dueDate = value;
				this.OnPropertyChanged("DueDate");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Priority", Storage="_priority", FieldType="Choice")]
	public System.Nullable<Priority> Priority {
		get {
			return this._priority;
		}
		set {
			if ((value != this._priority)) {
				this.OnPropertyChanging("Priority", this._priority);
				this._priority = value;
				this.OnPropertyChanged("Priority");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="TaskStatus", Storage="_taskStatus", FieldType="Choice")]
	public virtual System.Nullable<TaskStatus> TaskStatus {
		get {
			return this._taskStatus;
		}
		set {
			if ((value != this._taskStatus)) {
				this.OnPropertyChanging("TaskStatus", this._taskStatus);
				this._taskStatus = value;
				this.OnPropertyChanged("TaskStatus");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="AssignedTo", Storage="_assignedToId", FieldType="User", IsLookupId=true)]
	public System.Nullable<int> AssignedToId {
		get {
			return this._assignedToId;
		}
		set {
			if ((value != this._assignedToId)) {
				this.OnPropertyChanging("AssignedToId", this._assignedToId);
				this._assignedToId = value;
				this.OnPropertyChanged("AssignedToId");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="AssignedTo", Storage="_assignedTo", ReadOnly=true, FieldType="User", IsLookupValue=true)]
	public string AssignedTo {
		get {
			return this._assignedTo;
		}
		set {
			if ((value != this._assignedTo)) {
				this.OnPropertyChanging("AssignedTo", this._assignedTo);
				this._assignedTo = value;
				this.OnPropertyChanged("AssignedTo");
			}
		}
	}
}

/// <summary>
/// Create a new document.
/// </summary>
[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Document", Id="0x0101")]
[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(WikiPage))]
public partial class Document : Item {
	
	private string _name;
	
	private string _documentModifiedBy;
	
	private string _documentCreatedBy;
	
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate();
	partial void OnCreated();
	#endregion
	
	public Document() {
		this.OnCreated();
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="FileLeafRef", Storage="_name", Required=true, FieldType="File")]
	public string Name {
		get {
			return this._name;
		}
		set {
			if ((value != this._name)) {
				this.OnPropertyChanging("Name", this._name);
				this._name = value;
				this.OnPropertyChanged("Name");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Modified_x0020_By", Storage="_documentModifiedBy", ReadOnly=true, FieldType="Text")]
	public string DocumentModifiedBy {
		get {
			return this._documentModifiedBy;
		}
		set {
			if ((value != this._documentModifiedBy)) {
				this.OnPropertyChanging("DocumentModifiedBy", this._documentModifiedBy);
				this._documentModifiedBy = value;
				this.OnPropertyChanged("DocumentModifiedBy");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Created_x0020_By", Storage="_documentCreatedBy", ReadOnly=true, FieldType="Text")]
	public string DocumentCreatedBy {
		get {
			return this._documentCreatedBy;
		}
		set {
			if ((value != this._documentCreatedBy)) {
				this.OnPropertyChanging("DocumentCreatedBy", this._documentCreatedBy);
				this._documentCreatedBy = value;
				this.OnPropertyChanged("DocumentCreatedBy");
			}
		}
	}
}

/// <summary>
/// Group and describe related tasks that you or your team needs to complete.
/// </summary>
[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Summary Task", Id="0x012004")]
[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(ProjectTasksSummaryTask))]
[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(TasksSummaryTask))]
public partial class SummaryTask : Folder {
	
	private System.Nullable<double> _complete;
	
	private string _body;
	
	private System.Nullable<System.DateTime> _startDate;
	
	protected System.Nullable<System.DateTime> _dueDate;
	
	private System.Nullable<Priority> _priority;
	
	protected System.Nullable<TaskStatus> _taskStatus;
	
	private System.Nullable<int> _assignedToId;
	
	private string _assignedTo;
	
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate();
	partial void OnCreated();
	#endregion
	
	public SummaryTask() {
		this.OnCreated();
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="PercentComplete", Storage="_complete", FieldType="Number")]
	public System.Nullable<double> Complete {
		get {
			return this._complete;
		}
		set {
			if ((value != this._complete)) {
				this.OnPropertyChanging("Complete", this._complete);
				this._complete = value;
				this.OnPropertyChanged("Complete");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Body", Storage="_body", FieldType="Note")]
	public string Body {
		get {
			return this._body;
		}
		set {
			if ((value != this._body)) {
				this.OnPropertyChanging("Body", this._body);
				this._body = value;
				this.OnPropertyChanged("Body");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="StartDate", Storage="_startDate", FieldType="DateTime")]
	public System.Nullable<System.DateTime> StartDate {
		get {
			return this._startDate;
		}
		set {
			if ((value != this._startDate)) {
				this.OnPropertyChanging("StartDate", this._startDate);
				this._startDate = value;
				this.OnPropertyChanged("StartDate");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="TaskDueDate", Storage="_dueDate", FieldType="DateTime")]
	public virtual System.Nullable<System.DateTime> DueDate {
		get {
			return this._dueDate;
		}
		set {
			if ((value != this._dueDate)) {
				this.OnPropertyChanging("DueDate", this._dueDate);
				this._dueDate = value;
				this.OnPropertyChanged("DueDate");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Priority", Storage="_priority", FieldType="Choice")]
	public System.Nullable<Priority> Priority {
		get {
			return this._priority;
		}
		set {
			if ((value != this._priority)) {
				this.OnPropertyChanging("Priority", this._priority);
				this._priority = value;
				this.OnPropertyChanged("Priority");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="TaskStatus", Storage="_taskStatus", FieldType="Choice")]
	public virtual System.Nullable<TaskStatus> TaskStatus {
		get {
			return this._taskStatus;
		}
		set {
			if ((value != this._taskStatus)) {
				this.OnPropertyChanging("TaskStatus", this._taskStatus);
				this._taskStatus = value;
				this.OnPropertyChanged("TaskStatus");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="AssignedTo", Storage="_assignedToId", FieldType="User", IsLookupId=true)]
	public System.Nullable<int> AssignedToId {
		get {
			return this._assignedToId;
		}
		set {
			if ((value != this._assignedToId)) {
				this.OnPropertyChanging("AssignedToId", this._assignedToId);
				this._assignedToId = value;
				this.OnPropertyChanged("AssignedToId");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="AssignedTo", Storage="_assignedTo", ReadOnly=true, FieldType="User", IsLookupValue=true)]
	public string AssignedTo {
		get {
			return this._assignedTo;
		}
		set {
			if ((value != this._assignedTo)) {
				this.OnPropertyChanging("AssignedTo", this._assignedTo);
				this._assignedTo = value;
				this.OnPropertyChanged("AssignedTo");
			}
		}
	}
}

/// <summary>
/// Create a new wiki page.
/// </summary>
[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Wiki Page", Id="0x010108")]
public partial class WikiPage : Document {
	
	private string _wikiContent;
	
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate();
	partial void OnCreated();
	#endregion
	
	public WikiPage() {
		this.OnCreated();
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="WikiField", Storage="_wikiContent", FieldType="Note")]
	public string WikiContent {
		get {
			return this._wikiContent;
		}
		set {
			if ((value != this._wikiContent)) {
				this.OnPropertyChanging("WikiContent", this._wikiContent);
				this._wikiContent = value;
				this.OnPropertyChanged("WikiContent");
			}
		}
	}
	
	[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
	[Microsoft.SharePoint.Linq.RemovedColumnAttribute()]
	public override string Title {
		get {
			throw new System.InvalidOperationException("Field Title was removed from content type Wiki Page.");
		}
		set {
			throw new System.InvalidOperationException("Field Title was removed from content type Wiki Page.");
		}
	}
}

/// <summary>
/// Create a new list item.
/// </summary>
[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Item", Id="0x01", List="Languages")]
public partial class LanguagesItem : Item {
	
	private string _country;
	
	private string _skuDesignation;
	
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate();
	partial void OnCreated();
	#endregion
	
	public LanguagesItem() {
		this.OnCreated();
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Country", Storage="_country", FieldType="Text")]
	public string Country {
		get {
			return this._country;
		}
		set {
			if ((value != this._country)) {
				this.OnPropertyChanging("Country", this._country);
				this._country = value;
				this.OnPropertyChanged("Country");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Sku_x0020_Designation", Storage="_skuDesignation", FieldType="Text")]
	public string SkuDesignation {
		get {
			return this._skuDesignation;
		}
		set {
			if ((value != this._skuDesignation)) {
				this.OnPropertyChanging("SkuDesignation", this._skuDesignation);
				this._skuDesignation = value;
				this.OnPropertyChanged("SkuDesignation");
			}
		}
	}
}

/// <summary>
/// Create a new list item.
/// </summary>
[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Item", Id="0x01", List="Products")]
public partial class ProductsItem : Item {
	
	private string _textSku;
	
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate();
	partial void OnCreated();
	#endregion
	
	public ProductsItem() {
		this.OnCreated();
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Text_x0020_Sku", Storage="_textSku", Required=true, FieldType="Text")]
	public string TextSku {
		get {
			return this._textSku;
		}
		set {
			if ((value != this._textSku)) {
				this.OnPropertyChanging("TextSku", this._textSku);
				this._textSku = value;
				this.OnPropertyChanged("TextSku");
			}
		}
	}
}

/// <summary>
/// Create a new list item.
/// </summary>
[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Item", Id="0x01", List="Project Issues")]
public partial class ProjectIssuesItem : Item {
	
	private string _description;
	
	private System.Nullable<System.DateTime> _dueDate;
	
	private string _comments;
	
	private System.Nullable<IssueStatus> _issueStatus;
	
	private System.Nullable<Active> _active;
	
	private System.Nullable<Category> _category;
	
	private System.Nullable<Priority0> _priority;
	
	private Microsoft.SharePoint.Linq.EntityRef<ProjectsListItem> _project;
	
	private System.Nullable<int> _assignedToId;
	
	private string _assignedToImnName;
	
	private Microsoft.SharePoint.Linq.EntitySet<ProjectIssuesItem> _projectIssuesItem0;
	
	private Microsoft.SharePoint.Linq.EntitySet<ProjectIssuesItem> _relatedIssues;
	
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate();
	partial void OnCreated();
	#endregion
	
	public ProjectIssuesItem() {
		this._project = new Microsoft.SharePoint.Linq.EntityRef<ProjectsListItem>();
		this._project.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<ProjectsListItem>>(this.OnProjectSync);
		this._project.OnChanged += new System.EventHandler(this.OnProjectChanged);
		this._project.OnChanging += new System.EventHandler(this.OnProjectChanging);
		this._projectIssuesItem0 = new Microsoft.SharePoint.Linq.EntitySet<ProjectIssuesItem>();
		this._projectIssuesItem0.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<ProjectIssuesItem>>(this.OnProjectIssuesItem0Sync);
		this._projectIssuesItem0.OnChanged += new System.EventHandler(this.OnProjectIssuesItem0Changed);
		this._projectIssuesItem0.OnChanging += new System.EventHandler(this.OnProjectIssuesItem0Changing);
		this._relatedIssues = new Microsoft.SharePoint.Linq.EntitySet<ProjectIssuesItem>();
		this._relatedIssues.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<ProjectIssuesItem>>(this.OnRelatedIssuesSync);
		this._relatedIssues.OnChanged += new System.EventHandler(this.OnRelatedIssuesChanged);
		this._relatedIssues.OnChanging += new System.EventHandler(this.OnRelatedIssuesChanging);
		this.OnCreated();
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Description", Storage="_description", FieldType="Note")]
	public string Description {
		get {
			return this._description;
		}
		set {
			if ((value != this._description)) {
				this.OnPropertyChanging("Description", this._description);
				this._description = value;
				this.OnPropertyChanged("Description");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Due_x0020_Date", Storage="_dueDate", FieldType="DateTime")]
	public System.Nullable<System.DateTime> DueDate {
		get {
			return this._dueDate;
		}
		set {
			if ((value != this._dueDate)) {
				this.OnPropertyChanging("DueDate", this._dueDate);
				this._dueDate = value;
				this.OnPropertyChanged("DueDate");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Comments", Storage="_comments", FieldType="Note")]
	public string Comments {
		get {
			return this._comments;
		}
		set {
			if ((value != this._comments)) {
				this.OnPropertyChanging("Comments", this._comments);
				this._comments = value;
				this.OnPropertyChanged("Comments");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Issue_x0020_Status", Storage="_issueStatus", FieldType="Choice")]
	public System.Nullable<IssueStatus> IssueStatus {
		get {
			return this._issueStatus;
		}
		set {
			if ((value != this._issueStatus)) {
				this.OnPropertyChanging("IssueStatus", this._issueStatus);
				this._issueStatus = value;
				this.OnPropertyChanged("IssueStatus");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Active", Storage="_active", FieldType="Choice")]
	public System.Nullable<Active> Active {
		get {
			return this._active;
		}
		set {
			if ((value != this._active)) {
				this.OnPropertyChanging("Active", this._active);
				this._active = value;
				this.OnPropertyChanged("Active");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Category", Storage="_category", FieldType="Choice")]
	public System.Nullable<Category> Category {
		get {
			return this._category;
		}
		set {
			if ((value != this._category)) {
				this.OnPropertyChanging("Category", this._category);
				this._category = value;
				this.OnPropertyChanged("Category");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Priority", Storage="_priority", FieldType="Choice")]
	public System.Nullable<Priority0> Priority {
		get {
			return this._priority;
		}
		set {
			if ((value != this._priority)) {
				this.OnPropertyChanging("Priority", this._priority);
				this._priority = value;
				this.OnPropertyChanged("Priority");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Project", Storage="_project", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Projects List")]
	public ProjectsListItem Project {
		get {
			return this._project.GetEntity();
		}
		set {
			this._project.SetEntity(value);
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Assigned_x0020_To", Storage="_assignedToId", FieldType="User", IsLookupId=true)]
	public System.Nullable<int> AssignedToId {
		get {
			return this._assignedToId;
		}
		set {
			if ((value != this._assignedToId)) {
				this.OnPropertyChanging("AssignedToId", this._assignedToId);
				this._assignedToId = value;
				this.OnPropertyChanged("AssignedToId");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Assigned_x0020_To", Storage="_assignedToImnName", ReadOnly=true, FieldType="User", IsLookupValue=true)]
	public string AssignedToImnName {
		get {
			return this._assignedToImnName;
		}
		set {
			if ((value != this._assignedToImnName)) {
				this.OnPropertyChanging("AssignedToImnName", this._assignedToImnName);
				this._assignedToImnName = value;
				this.OnPropertyChanged("AssignedToImnName");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Related_x0020_Issues", Storage="_projectIssuesItem0", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Project Issues")]
	public Microsoft.SharePoint.Linq.EntitySet<ProjectIssuesItem> ProjectIssuesItem0 {
		get {
			return this._projectIssuesItem0;
		}
		set {
			this._projectIssuesItem0.Assign(value);
		}
	}
	
	[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Related_x0020_Issues", Storage="_relatedIssues", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Multi, List="Project Issues")]
	public Microsoft.SharePoint.Linq.EntitySet<ProjectIssuesItem> RelatedIssues {
		get {
			return this._relatedIssues;
		}
		set {
			this._relatedIssues.Assign(value);
		}
	}
	
	private void OnProjectChanging(object sender, System.EventArgs e) {
		this.OnPropertyChanging("Project", this._project.Clone());
	}
	
	private void OnProjectChanged(object sender, System.EventArgs e) {
		this.OnPropertyChanged("Project");
	}
	
	private void OnProjectSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<ProjectsListItem> e) {
		if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
			e.Item.ProjectIssuesItem.Add(this);
		}
		else {
			e.Item.ProjectIssuesItem.Remove(this);
		}
	}
	
	private void OnProjectIssuesItem0Changing(object sender, System.EventArgs e) {
		this.OnPropertyChanging("ProjectIssuesItem0", this._projectIssuesItem0.Clone());
	}
	
	private void OnProjectIssuesItem0Changed(object sender, System.EventArgs e) {
		this.OnPropertyChanged("ProjectIssuesItem0");
	}
	
	private void OnProjectIssuesItem0Sync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<ProjectIssuesItem> e) {
		if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
			e.Item.RelatedIssues.Add(this);
		}
		else {
			e.Item.RelatedIssues.Remove(this);
		}
	}
	
	private void OnRelatedIssuesChanging(object sender, System.EventArgs e) {
		this.OnPropertyChanging("RelatedIssues", this._relatedIssues.Clone());
	}
	
	private void OnRelatedIssuesChanged(object sender, System.EventArgs e) {
		this.OnPropertyChanged("RelatedIssues");
	}
	
	private void OnRelatedIssuesSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<ProjectIssuesItem> e) {
		if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
			e.Item.ProjectIssuesItem0.Add(this);
		}
		else {
			e.Item.ProjectIssuesItem0.Remove(this);
		}
	}
}

/// <summary>
/// Create a new list item.
/// </summary>
[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Item", Id="0x01", List="Project Milestones")]
public partial class ProjectMilestonesItem : Item {
	
	private System.Nullable<System.DateTime> _dueDate;
	
	private System.Nullable<bool> _complete;
	
	private string _comments;
	
	private Microsoft.SharePoint.Linq.EntityRef<ProjectsListItem> _project;
	
	private Microsoft.SharePoint.Linq.EntitySet<ProjectTasksTask> _projectTasksTask;
	
	private Microsoft.SharePoint.Linq.EntitySet<ProjectTasksSummaryTask> _projectTasksSummaryTask;
	
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate();
	partial void OnCreated();
	#endregion
	
	public ProjectMilestonesItem() {
		this._project = new Microsoft.SharePoint.Linq.EntityRef<ProjectsListItem>();
		this._project.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<ProjectsListItem>>(this.OnProjectSync);
		this._project.OnChanged += new System.EventHandler(this.OnProjectChanged);
		this._project.OnChanging += new System.EventHandler(this.OnProjectChanging);
		this._projectTasksTask = new Microsoft.SharePoint.Linq.EntitySet<ProjectTasksTask>();
		this._projectTasksTask.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<ProjectTasksTask>>(this.OnProjectTasksTaskSync);
		this._projectTasksTask.OnChanged += new System.EventHandler(this.OnProjectTasksTaskChanged);
		this._projectTasksTask.OnChanging += new System.EventHandler(this.OnProjectTasksTaskChanging);
		this._projectTasksSummaryTask = new Microsoft.SharePoint.Linq.EntitySet<ProjectTasksSummaryTask>();
		this._projectTasksSummaryTask.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<ProjectTasksSummaryTask>>(this.OnProjectTasksSummaryTaskSync);
		this._projectTasksSummaryTask.OnChanged += new System.EventHandler(this.OnProjectTasksSummaryTaskChanged);
		this._projectTasksSummaryTask.OnChanging += new System.EventHandler(this.OnProjectTasksSummaryTaskChanging);
		this.OnCreated();
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Due_x0020_Date", Storage="_dueDate", FieldType="DateTime")]
	public System.Nullable<System.DateTime> DueDate {
		get {
			return this._dueDate;
		}
		set {
			if ((value != this._dueDate)) {
				this.OnPropertyChanging("DueDate", this._dueDate);
				this._dueDate = value;
				this.OnPropertyChanged("DueDate");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Complete", Storage="_complete", FieldType="Boolean")]
	public System.Nullable<bool> Complete {
		get {
			return this._complete;
		}
		set {
			if ((value != this._complete)) {
				this.OnPropertyChanging("Complete", this._complete);
				this._complete = value;
				this.OnPropertyChanged("Complete");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Comments", Storage="_comments", FieldType="Note")]
	public string Comments {
		get {
			return this._comments;
		}
		set {
			if ((value != this._comments)) {
				this.OnPropertyChanging("Comments", this._comments);
				this._comments = value;
				this.OnPropertyChanged("Comments");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Project", Storage="_project", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Projects List")]
	public ProjectsListItem Project {
		get {
			return this._project.GetEntity();
		}
		set {
			this._project.SetEntity(value);
		}
	}
	
	[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Milestone", Storage="_projectTasksTask", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Project Tasks")]
	public Microsoft.SharePoint.Linq.EntitySet<ProjectTasksTask> ProjectTasksTask {
		get {
			return this._projectTasksTask;
		}
		set {
			this._projectTasksTask.Assign(value);
		}
	}
	
	[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Milestone", Storage="_projectTasksSummaryTask", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Project Tasks")]
	public Microsoft.SharePoint.Linq.EntitySet<ProjectTasksSummaryTask> ProjectTasksSummaryTask {
		get {
			return this._projectTasksSummaryTask;
		}
		set {
			this._projectTasksSummaryTask.Assign(value);
		}
	}
	
	private void OnProjectChanging(object sender, System.EventArgs e) {
		this.OnPropertyChanging("Project", this._project.Clone());
	}
	
	private void OnProjectChanged(object sender, System.EventArgs e) {
		this.OnPropertyChanged("Project");
	}
	
	private void OnProjectSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<ProjectsListItem> e) {
		if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
			e.Item.ProjectMilestonesItem.Add(this);
		}
		else {
			e.Item.ProjectMilestonesItem.Remove(this);
		}
	}
	
	private void OnProjectTasksTaskChanging(object sender, System.EventArgs e) {
		this.OnPropertyChanging("ProjectTasksTask", this._projectTasksTask.Clone());
	}
	
	private void OnProjectTasksTaskChanged(object sender, System.EventArgs e) {
		this.OnPropertyChanged("ProjectTasksTask");
	}
	
	private void OnProjectTasksTaskSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<ProjectTasksTask> e) {
		if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
			e.Item.Milestone = this;
		}
		else {
			e.Item.Milestone = null;
		}
	}
	
	private void OnProjectTasksSummaryTaskChanging(object sender, System.EventArgs e) {
		this.OnPropertyChanging("ProjectTasksSummaryTask", this._projectTasksSummaryTask.Clone());
	}
	
	private void OnProjectTasksSummaryTaskChanged(object sender, System.EventArgs e) {
		this.OnPropertyChanged("ProjectTasksSummaryTask");
	}
	
	private void OnProjectTasksSummaryTaskSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<ProjectTasksSummaryTask> e) {
		if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
			e.Item.Milestone = this;
		}
		else {
			e.Item.Milestone = null;
		}
	}
}

/// <summary>
/// Create a new list item.
/// </summary>
[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Item", Id="0x01", List="Projects List")]
public partial class ProjectsListItem : Item {
	
	private System.Nullable<System.DateTime> _startDate;
	
	private System.Nullable<System.DateTime> _endDate;
	
	private System.Nullable<double> _complete;
	
	private System.Nullable<double> _budget;
	
	private System.Nullable<double> _budgetInDays;
	
	private string _comments;
	
	private System.Nullable<Category0> _category;
	
	private System.Nullable<Status> _status;
	
	private System.Nullable<Health> _health;
	
	private Microsoft.SharePoint.Linq.EntitySet<ProjectIssuesItem> _projectIssuesItem;
	
	private Microsoft.SharePoint.Linq.EntitySet<ProjectMilestonesItem> _projectMilestonesItem;
	
	private System.Nullable<int> _ownerId;
	
	private string _ownerImnName;
	
	private Microsoft.SharePoint.Linq.EntitySet<ProjectTasksTask> _projectTasksTask;
	
	private Microsoft.SharePoint.Linq.EntitySet<ProjectTasksSummaryTask> _projectTasksSummaryTask;
	
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate();
	partial void OnCreated();
	#endregion
	
	public ProjectsListItem() {
		this._projectIssuesItem = new Microsoft.SharePoint.Linq.EntitySet<ProjectIssuesItem>();
		this._projectIssuesItem.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<ProjectIssuesItem>>(this.OnProjectIssuesItemSync);
		this._projectIssuesItem.OnChanged += new System.EventHandler(this.OnProjectIssuesItemChanged);
		this._projectIssuesItem.OnChanging += new System.EventHandler(this.OnProjectIssuesItemChanging);
		this._projectMilestonesItem = new Microsoft.SharePoint.Linq.EntitySet<ProjectMilestonesItem>();
		this._projectMilestonesItem.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<ProjectMilestonesItem>>(this.OnProjectMilestonesItemSync);
		this._projectMilestonesItem.OnChanged += new System.EventHandler(this.OnProjectMilestonesItemChanged);
		this._projectMilestonesItem.OnChanging += new System.EventHandler(this.OnProjectMilestonesItemChanging);
		this._projectTasksTask = new Microsoft.SharePoint.Linq.EntitySet<ProjectTasksTask>();
		this._projectTasksTask.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<ProjectTasksTask>>(this.OnProjectTasksTaskSync);
		this._projectTasksTask.OnChanged += new System.EventHandler(this.OnProjectTasksTaskChanged);
		this._projectTasksTask.OnChanging += new System.EventHandler(this.OnProjectTasksTaskChanging);
		this._projectTasksSummaryTask = new Microsoft.SharePoint.Linq.EntitySet<ProjectTasksSummaryTask>();
		this._projectTasksSummaryTask.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<ProjectTasksSummaryTask>>(this.OnProjectTasksSummaryTaskSync);
		this._projectTasksSummaryTask.OnChanged += new System.EventHandler(this.OnProjectTasksSummaryTaskChanged);
		this._projectTasksSummaryTask.OnChanging += new System.EventHandler(this.OnProjectTasksSummaryTaskChanging);
		this.OnCreated();
	}
	
	/// <summary>
	/// Type date in M/D/YYYY format.
	/// </summary>
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Start_x0020_Date", Storage="_startDate", FieldType="DateTime")]
	public System.Nullable<System.DateTime> StartDate {
		get {
			return this._startDate;
		}
		set {
			if ((value != this._startDate)) {
				this.OnPropertyChanging("StartDate", this._startDate);
				this._startDate = value;
				this.OnPropertyChanged("StartDate");
			}
		}
	}
	
	/// <summary>
	/// Type date in M/D/YYYY format.
	/// </summary>
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="End_x0020_Date", Storage="_endDate", FieldType="DateTime")]
	public System.Nullable<System.DateTime> EndDate {
		get {
			return this._endDate;
		}
		set {
			if ((value != this._endDate)) {
				this.OnPropertyChanging("EndDate", this._endDate);
				this._endDate = value;
				this.OnPropertyChanged("EndDate");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="_x0025__x0020_Complete", Storage="_complete", FieldType="Number")]
	public System.Nullable<double> Complete {
		get {
			return this._complete;
		}
		set {
			if ((value != this._complete)) {
				this.OnPropertyChanging("Complete", this._complete);
				this._complete = value;
				this.OnPropertyChanged("Complete");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Budget", Storage="_budget", Required=true, FieldType="Currency")]
	public System.Nullable<double> Budget {
		get {
			return this._budget;
		}
		set {
			if ((value != this._budget)) {
				this.OnPropertyChanging("Budget", this._budget);
				this._budget = value;
				this.OnPropertyChanged("Budget");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Budget_x0020_in_x0020_Days", Storage="_budgetInDays", Required=true, FieldType="Number")]
	public System.Nullable<double> BudgetInDays {
		get {
			return this._budgetInDays;
		}
		set {
			if ((value != this._budgetInDays)) {
				this.OnPropertyChanging("BudgetInDays", this._budgetInDays);
				this._budgetInDays = value;
				this.OnPropertyChanged("BudgetInDays");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Comments", Storage="_comments", FieldType="Note")]
	public string Comments {
		get {
			return this._comments;
		}
		set {
			if ((value != this._comments)) {
				this.OnPropertyChanging("Comments", this._comments);
				this._comments = value;
				this.OnPropertyChanged("Comments");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Category", Storage="_category", FieldType="Choice")]
	public System.Nullable<Category0> Category {
		get {
			return this._category;
		}
		set {
			if ((value != this._category)) {
				this.OnPropertyChanging("Category", this._category);
				this._category = value;
				this.OnPropertyChanged("Category");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Status", Storage="_status", Required=true, FieldType="Choice")]
	public System.Nullable<Status> Status {
		get {
			return this._status;
		}
		set {
			if ((value != this._status)) {
				this.OnPropertyChanging("Status", this._status);
				this._status = value;
				this.OnPropertyChanged("Status");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Health", Storage="_health", FieldType="Choice")]
	public System.Nullable<Health> Health {
		get {
			return this._health;
		}
		set {
			if ((value != this._health)) {
				this.OnPropertyChanging("Health", this._health);
				this._health = value;
				this.OnPropertyChanged("Health");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Project", Storage="_projectIssuesItem", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Project Issues")]
	public Microsoft.SharePoint.Linq.EntitySet<ProjectIssuesItem> ProjectIssuesItem {
		get {
			return this._projectIssuesItem;
		}
		set {
			this._projectIssuesItem.Assign(value);
		}
	}
	
	[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Project", Storage="_projectMilestonesItem", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Project Milestones")]
	public Microsoft.SharePoint.Linq.EntitySet<ProjectMilestonesItem> ProjectMilestonesItem {
		get {
			return this._projectMilestonesItem;
		}
		set {
			this._projectMilestonesItem.Assign(value);
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Owner", Storage="_ownerId", FieldType="User", IsLookupId=true)]
	public System.Nullable<int> OwnerId {
		get {
			return this._ownerId;
		}
		set {
			if ((value != this._ownerId)) {
				this.OnPropertyChanging("OwnerId", this._ownerId);
				this._ownerId = value;
				this.OnPropertyChanged("OwnerId");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Owner", Storage="_ownerImnName", ReadOnly=true, FieldType="User", IsLookupValue=true)]
	public string OwnerImnName {
		get {
			return this._ownerImnName;
		}
		set {
			if ((value != this._ownerImnName)) {
				this.OnPropertyChanging("OwnerImnName", this._ownerImnName);
				this._ownerImnName = value;
				this.OnPropertyChanged("OwnerImnName");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Project", Storage="_projectTasksTask", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Project Tasks")]
	public Microsoft.SharePoint.Linq.EntitySet<ProjectTasksTask> ProjectTasksTask {
		get {
			return this._projectTasksTask;
		}
		set {
			this._projectTasksTask.Assign(value);
		}
	}
	
	[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Project", Storage="_projectTasksSummaryTask", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Project Tasks")]
	public Microsoft.SharePoint.Linq.EntitySet<ProjectTasksSummaryTask> ProjectTasksSummaryTask {
		get {
			return this._projectTasksSummaryTask;
		}
		set {
			this._projectTasksSummaryTask.Assign(value);
		}
	}
	
	private void OnProjectIssuesItemChanging(object sender, System.EventArgs e) {
		this.OnPropertyChanging("ProjectIssuesItem", this._projectIssuesItem.Clone());
	}
	
	private void OnProjectIssuesItemChanged(object sender, System.EventArgs e) {
		this.OnPropertyChanged("ProjectIssuesItem");
	}
	
	private void OnProjectIssuesItemSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<ProjectIssuesItem> e) {
		if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
			e.Item.Project = this;
		}
		else {
			e.Item.Project = null;
		}
	}
	
	private void OnProjectMilestonesItemChanging(object sender, System.EventArgs e) {
		this.OnPropertyChanging("ProjectMilestonesItem", this._projectMilestonesItem.Clone());
	}
	
	private void OnProjectMilestonesItemChanged(object sender, System.EventArgs e) {
		this.OnPropertyChanged("ProjectMilestonesItem");
	}
	
	private void OnProjectMilestonesItemSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<ProjectMilestonesItem> e) {
		if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
			e.Item.Project = this;
		}
		else {
			e.Item.Project = null;
		}
	}
	
	private void OnProjectTasksTaskChanging(object sender, System.EventArgs e) {
		this.OnPropertyChanging("ProjectTasksTask", this._projectTasksTask.Clone());
	}
	
	private void OnProjectTasksTaskChanged(object sender, System.EventArgs e) {
		this.OnPropertyChanged("ProjectTasksTask");
	}
	
	private void OnProjectTasksTaskSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<ProjectTasksTask> e) {
		if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
			e.Item.Project = this;
		}
		else {
			e.Item.Project = null;
		}
	}
	
	private void OnProjectTasksSummaryTaskChanging(object sender, System.EventArgs e) {
		this.OnPropertyChanging("ProjectTasksSummaryTask", this._projectTasksSummaryTask.Clone());
	}
	
	private void OnProjectTasksSummaryTaskChanged(object sender, System.EventArgs e) {
		this.OnPropertyChanged("ProjectTasksSummaryTask");
	}
	
	private void OnProjectTasksSummaryTaskSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<ProjectTasksSummaryTask> e) {
		if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
			e.Item.Project = this;
		}
		else {
			e.Item.Project = null;
		}
	}
}

/// <summary>
/// Create a new list item.
/// </summary>
[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Item", Id="0x01", List="Translations")]
public partial class TranslationsItem : Item {
	
	private string _language;
	
	private string _item0;
	
	private string _name;
	
	private string _description;
	
	private string _features;
	
	private string _category;
	
	private string _skuDesignation;
	
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate();
	partial void OnCreated();
	#endregion
	
	public TranslationsItem() {
		this.OnCreated();
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Language", Storage="_language", Required=true, FieldType="Text")]
	public string Language {
		get {
			return this._language;
		}
		set {
			if ((value != this._language)) {
				this.OnPropertyChanging("Language", this._language);
				this._language = value;
				this.OnPropertyChanged("Language");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Item", Storage="_item0", Required=true, FieldType="Text")]
	public string Item0 {
		get {
			return this._item0;
		}
		set {
			if ((value != this._item0)) {
				this.OnPropertyChanging("Item0", this._item0);
				this._item0 = value;
				this.OnPropertyChanged("Item0");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Name", Storage="_name", ReadOnly=true, IsCalculated=true, FieldType="Text")]
	public string Name {
		get {
			return this._name;
		}
		set {
			if ((value != this._name)) {
				this.OnPropertyChanging("Name", this._name);
				this._name = value;
				this.OnPropertyChanged("Name");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Description", Storage="_description", FieldType="Note")]
	public string Description {
		get {
			return this._description;
		}
		set {
			if ((value != this._description)) {
				this.OnPropertyChanging("Description", this._description);
				this._description = value;
				this.OnPropertyChanged("Description");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Features", Storage="_features", FieldType="Text")]
	public string Features {
		get {
			return this._features;
		}
		set {
			if ((value != this._features)) {
				this.OnPropertyChanging("Features", this._features);
				this._features = value;
				this.OnPropertyChanged("Features");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Category", Storage="_category", Required=true, FieldType="Text")]
	public string Category {
		get {
			return this._category;
		}
		set {
			if ((value != this._category)) {
				this.OnPropertyChanging("Category", this._category);
				this._category = value;
				this.OnPropertyChanged("Category");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Item_x0020_Designation", Storage="_skuDesignation", FieldType="Text")]
	public string SkuDesignation {
		get {
			return this._skuDesignation;
		}
		set {
			if ((value != this._skuDesignation)) {
				this.OnPropertyChanging("SkuDesignation", this._skuDesignation);
				this._skuDesignation = value;
				this.OnPropertyChanged("SkuDesignation");
			}
		}
	}
}

/// <summary>
/// Track a work item that you or your team needs to complete.
/// </summary>
[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Task", Id="0x0108", List="Project Tasks")]
public partial class ProjectTasksTask : Task {
	
	private System.Nullable<double> _cost;
	
	private System.Nullable<double> _costInDays;
	
	private System.Nullable<Status0> _status;
	
	private Microsoft.SharePoint.Linq.EntityRef<ProjectsListItem> _project;
	
	private Microsoft.SharePoint.Linq.EntityRef<ProjectMilestonesItem> _milestone;
	
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate();
	partial void OnCreated();
	#endregion
	
	public ProjectTasksTask() {
		this._project = new Microsoft.SharePoint.Linq.EntityRef<ProjectsListItem>();
		this._project.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<ProjectsListItem>>(this.OnProjectSync);
		this._project.OnChanged += new System.EventHandler(this.OnProjectChanged);
		this._project.OnChanging += new System.EventHandler(this.OnProjectChanging);
		this._milestone = new Microsoft.SharePoint.Linq.EntityRef<ProjectMilestonesItem>();
		this._milestone.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<ProjectMilestonesItem>>(this.OnMilestoneSync);
		this._milestone.OnChanged += new System.EventHandler(this.OnMilestoneChanged);
		this._milestone.OnChanging += new System.EventHandler(this.OnMilestoneChanging);
		this.OnCreated();
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="DueDate", Storage="_dueDate", FieldType="DateTime")]
	public override System.Nullable<System.DateTime> DueDate {
		get {
			return this._dueDate;
		}
		set {
			if ((value != this._dueDate)) {
				this.OnPropertyChanging("DueDate", this._dueDate);
				this._dueDate = value;
				this.OnPropertyChanged("DueDate");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Cost", Storage="_cost", FieldType="Currency")]
	public System.Nullable<double> Cost {
		get {
			return this._cost;
		}
		set {
			if ((value != this._cost)) {
				this.OnPropertyChanging("Cost", this._cost);
				this._cost = value;
				this.OnPropertyChanged("Cost");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Cost_x0020_in_x0020_Days", Storage="_costInDays", Required=true, FieldType="Number")]
	public System.Nullable<double> CostInDays {
		get {
			return this._costInDays;
		}
		set {
			if ((value != this._costInDays)) {
				this.OnPropertyChanging("CostInDays", this._costInDays);
				this._costInDays = value;
				this.OnPropertyChanged("CostInDays");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Status0", Storage="_status", FieldType="Choice")]
	public System.Nullable<Status0> Status {
		get {
			return this._status;
		}
		set {
			if ((value != this._status)) {
				this.OnPropertyChanging("Status", this._status);
				this._status = value;
				this.OnPropertyChanged("Status");
			}
		}
	}
	
	[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
	[Microsoft.SharePoint.Linq.RemovedColumnAttribute()]
	public override System.Nullable<TaskStatus> TaskStatus {
		get {
			throw new System.InvalidOperationException("Field TaskStatus was removed from content type Task.");
		}
		set {
			throw new System.InvalidOperationException("Field TaskStatus was removed from content type Task.");
		}
	}
	
	[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Project", Storage="_project", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Projects List")]
	public ProjectsListItem Project {
		get {
			return this._project.GetEntity();
		}
		set {
			this._project.SetEntity(value);
		}
	}
	
	[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Milestone", Storage="_milestone", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Project Milestones")]
	public ProjectMilestonesItem Milestone {
		get {
			return this._milestone.GetEntity();
		}
		set {
			this._milestone.SetEntity(value);
		}
	}
	
	private void OnProjectChanging(object sender, System.EventArgs e) {
		this.OnPropertyChanging("Project", this._project.Clone());
	}
	
	private void OnProjectChanged(object sender, System.EventArgs e) {
		this.OnPropertyChanged("Project");
	}
	
	private void OnProjectSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<ProjectsListItem> e) {
		if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
			e.Item.ProjectTasksTask.Add(this);
		}
		else {
			e.Item.ProjectTasksTask.Remove(this);
		}
	}
	
	private void OnMilestoneChanging(object sender, System.EventArgs e) {
		this.OnPropertyChanging("Milestone", this._milestone.Clone());
	}
	
	private void OnMilestoneChanged(object sender, System.EventArgs e) {
		this.OnPropertyChanged("Milestone");
	}
	
	private void OnMilestoneSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<ProjectMilestonesItem> e) {
		if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
			e.Item.ProjectTasksTask.Add(this);
		}
		else {
			e.Item.ProjectTasksTask.Remove(this);
		}
	}
}

/// <summary>
/// Track a work item that you or your team needs to complete.
/// </summary>
[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Task", Id="0x0108", List="Tasks")]
public partial class TasksTask : Task {
	
	private Microsoft.SharePoint.Linq.EntitySet<Item> _predecessors;
	
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate();
	partial void OnCreated();
	#endregion
	
	public TasksTask() {
		this._predecessors = new Microsoft.SharePoint.Linq.EntitySet<Item>();
		this._predecessors.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Item>>(this.OnPredecessorsSync);
		this._predecessors.OnChanged += new System.EventHandler(this.OnPredecessorsChanged);
		this._predecessors.OnChanging += new System.EventHandler(this.OnPredecessorsChanging);
		this.OnCreated();
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="DueDate", Storage="_dueDate", FieldType="DateTime")]
	public override System.Nullable<System.DateTime> DueDate {
		get {
			return this._dueDate;
		}
		set {
			if ((value != this._dueDate)) {
				this.OnPropertyChanging("DueDate", this._dueDate);
				this._dueDate = value;
				this.OnPropertyChanged("DueDate");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Status", Storage="_taskStatus", FieldType="Choice")]
	public override System.Nullable<TaskStatus> TaskStatus {
		get {
			return this._taskStatus;
		}
		set {
			if ((value != this._taskStatus)) {
				this.OnPropertyChanging("TaskStatus", this._taskStatus);
				this._taskStatus = value;
				this.OnPropertyChanged("TaskStatus");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Predecessors", Storage="_predecessors", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Multi, List="Tasks")]
	public Microsoft.SharePoint.Linq.EntitySet<Item> Predecessors {
		get {
			return this._predecessors;
		}
		set {
			this._predecessors.Assign(value);
		}
	}
	
	private void OnPredecessorsChanging(object sender, System.EventArgs e) {
		this.OnPropertyChanging("Predecessors", this._predecessors.Clone());
	}
	
	private void OnPredecessorsChanged(object sender, System.EventArgs e) {
		this.OnPropertyChanged("Predecessors");
	}
	
	private void OnPredecessorsSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Item> e) {
	}
}

/// <summary>
/// Group and describe related tasks that you or your team needs to complete.
/// </summary>
[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Summary Task", Id="0x012004", List="Project Tasks")]
public partial class ProjectTasksSummaryTask : SummaryTask {
	
	private System.Nullable<double> _cost;
	
	private System.Nullable<double> _costInDays;
	
	private System.Nullable<Status0> _status;
	
	private Microsoft.SharePoint.Linq.EntityRef<ProjectsListItem> _project;
	
	private Microsoft.SharePoint.Linq.EntityRef<ProjectMilestonesItem> _milestone;
	
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate();
	partial void OnCreated();
	#endregion
	
	public ProjectTasksSummaryTask() {
		this._project = new Microsoft.SharePoint.Linq.EntityRef<ProjectsListItem>();
		this._project.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<ProjectsListItem>>(this.OnProjectSync);
		this._project.OnChanged += new System.EventHandler(this.OnProjectChanged);
		this._project.OnChanging += new System.EventHandler(this.OnProjectChanging);
		this._milestone = new Microsoft.SharePoint.Linq.EntityRef<ProjectMilestonesItem>();
		this._milestone.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<ProjectMilestonesItem>>(this.OnMilestoneSync);
		this._milestone.OnChanged += new System.EventHandler(this.OnMilestoneChanged);
		this._milestone.OnChanging += new System.EventHandler(this.OnMilestoneChanging);
		this.OnCreated();
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="DueDate", Storage="_dueDate", FieldType="DateTime")]
	public override System.Nullable<System.DateTime> DueDate {
		get {
			return this._dueDate;
		}
		set {
			if ((value != this._dueDate)) {
				this.OnPropertyChanging("DueDate", this._dueDate);
				this._dueDate = value;
				this.OnPropertyChanged("DueDate");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Cost", Storage="_cost", FieldType="Currency")]
	public System.Nullable<double> Cost {
		get {
			return this._cost;
		}
		set {
			if ((value != this._cost)) {
				this.OnPropertyChanging("Cost", this._cost);
				this._cost = value;
				this.OnPropertyChanged("Cost");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Cost_x0020_in_x0020_Days", Storage="_costInDays", Required=true, FieldType="Number")]
	public System.Nullable<double> CostInDays {
		get {
			return this._costInDays;
		}
		set {
			if ((value != this._costInDays)) {
				this.OnPropertyChanging("CostInDays", this._costInDays);
				this._costInDays = value;
				this.OnPropertyChanged("CostInDays");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Status0", Storage="_status", FieldType="Choice")]
	public System.Nullable<Status0> Status {
		get {
			return this._status;
		}
		set {
			if ((value != this._status)) {
				this.OnPropertyChanging("Status", this._status);
				this._status = value;
				this.OnPropertyChanged("Status");
			}
		}
	}
	
	[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
	[Microsoft.SharePoint.Linq.RemovedColumnAttribute()]
	public override System.Nullable<TaskStatus> TaskStatus {
		get {
			throw new System.InvalidOperationException("Field TaskStatus was removed from content type Summary Task.");
		}
		set {
			throw new System.InvalidOperationException("Field TaskStatus was removed from content type Summary Task.");
		}
	}
	
	[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Project", Storage="_project", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Projects List")]
	public ProjectsListItem Project {
		get {
			return this._project.GetEntity();
		}
		set {
			this._project.SetEntity(value);
		}
	}
	
	[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Milestone", Storage="_milestone", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Project Milestones")]
	public ProjectMilestonesItem Milestone {
		get {
			return this._milestone.GetEntity();
		}
		set {
			this._milestone.SetEntity(value);
		}
	}
	
	private void OnProjectChanging(object sender, System.EventArgs e) {
		this.OnPropertyChanging("Project", this._project.Clone());
	}
	
	private void OnProjectChanged(object sender, System.EventArgs e) {
		this.OnPropertyChanged("Project");
	}
	
	private void OnProjectSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<ProjectsListItem> e) {
		if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
			e.Item.ProjectTasksSummaryTask.Add(this);
		}
		else {
			e.Item.ProjectTasksSummaryTask.Remove(this);
		}
	}
	
	private void OnMilestoneChanging(object sender, System.EventArgs e) {
		this.OnPropertyChanging("Milestone", this._milestone.Clone());
	}
	
	private void OnMilestoneChanged(object sender, System.EventArgs e) {
		this.OnPropertyChanged("Milestone");
	}
	
	private void OnMilestoneSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<ProjectMilestonesItem> e) {
		if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
			e.Item.ProjectTasksSummaryTask.Add(this);
		}
		else {
			e.Item.ProjectTasksSummaryTask.Remove(this);
		}
	}
}

/// <summary>
/// Group and describe related tasks that you or your team needs to complete.
/// </summary>
[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Summary Task", Id="0x012004", List="Tasks")]
public partial class TasksSummaryTask : SummaryTask {
	
	private Microsoft.SharePoint.Linq.EntitySet<Item> _predecessors;
	
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate();
	partial void OnCreated();
	#endregion
	
	public TasksSummaryTask() {
		this._predecessors = new Microsoft.SharePoint.Linq.EntitySet<Item>();
		this._predecessors.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Item>>(this.OnPredecessorsSync);
		this._predecessors.OnChanged += new System.EventHandler(this.OnPredecessorsChanged);
		this._predecessors.OnChanging += new System.EventHandler(this.OnPredecessorsChanging);
		this.OnCreated();
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="DueDate", Storage="_dueDate", FieldType="DateTime")]
	public override System.Nullable<System.DateTime> DueDate {
		get {
			return this._dueDate;
		}
		set {
			if ((value != this._dueDate)) {
				this.OnPropertyChanging("DueDate", this._dueDate);
				this._dueDate = value;
				this.OnPropertyChanged("DueDate");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Status", Storage="_taskStatus", FieldType="Choice")]
	public override System.Nullable<TaskStatus> TaskStatus {
		get {
			return this._taskStatus;
		}
		set {
			if ((value != this._taskStatus)) {
				this.OnPropertyChanging("TaskStatus", this._taskStatus);
				this._taskStatus = value;
				this.OnPropertyChanged("TaskStatus");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.AssociationAttribute(Name="Predecessors", Storage="_predecessors", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Multi, List="Tasks")]
	public Microsoft.SharePoint.Linq.EntitySet<Item> Predecessors {
		get {
			return this._predecessors;
		}
		set {
			this._predecessors.Assign(value);
		}
	}
	
	private void OnPredecessorsChanging(object sender, System.EventArgs e) {
		this.OnPropertyChanging("Predecessors", this._predecessors.Clone());
	}
	
	private void OnPredecessorsChanged(object sender, System.EventArgs e) {
		this.OnPropertyChanged("Predecessors");
	}
	
	private void OnPredecessorsSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Item> e) {
	}
}

public enum Priority : int {
	
	None = 0,
	
	Invalid = 1,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="(1) High")]
	_1High = 2,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="(2) Normal")]
	_2Normal = 4,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="(3) Low")]
	_3Low = 8,
}

public enum TaskStatus : int {
	
	None = 0,
	
	Invalid = 1,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Not Started")]
	NotStarted = 2,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="In Progress")]
	InProgress = 4,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Completed")]
	Completed = 8,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Deferred")]
	Deferred = 16,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Waiting on someone else")]
	WaitingOnSomeoneElse = 32,
}

public enum IssueStatus : int {
	
	None = 0,
	
	Invalid = 1,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Active")]
	Active = 2,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Resolved")]
	Resolved = 4,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Closed")]
	Closed = 8,
}

public enum Active : int {
	
	None = 0,
	
	Invalid = 1,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="(1) High")]
	_1High = 2,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="(2) Normal")]
	_2Normal = 4,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="(3) Low")]
	_3Low = 8,
}

public enum Category : int {
	
	None = 0,
	
	Invalid = 1,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="(1) Category1")]
	_1Category1 = 2,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="(2) Category2")]
	_2Category2 = 4,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="(3) Category3")]
	_3Category3 = 8,
}

public enum Priority0 : int {
	
	None = 0,
	
	Invalid = 1,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="(1) High")]
	_1High = 2,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="(2) Normal")]
	_2Normal = 4,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="(3) Low")]
	_3Low = 8,
}

public enum Category0 : int {
	
	None = 0,
	
	Invalid = 1,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Car Seats")]
	CarSeats = 2,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Car Seat Accessories")]
	CarSeatAccessories = 4,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Stroller Accessories")]
	StrollerAccessories = 8,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Travel Accessories")]
	TravelAccessories = 16,
}

public enum Status : int {
	
	None = 0,
	
	Invalid = 1,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Open")]
	Open = 2,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Proposed")]
	Proposed = 4,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Not Started")]
	NotStarted = 8,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Closed")]
	Closed = 16,
}

public enum Health : int {
	
	None = 0,
	
	Invalid = 1,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Critical")]
	Critical = 2,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="At Risk")]
	AtRisk = 4,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="On Track")]
	OnTrack = 8,
}

public enum Status0 : int {
	
	None = 0,
	
	Invalid = 1,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Not Started")]
	NotStarted = 2,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="In Progress")]
	InProgress = 4,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Completed")]
	Completed = 8,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Deferred")]
	Deferred = 16,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Waiting on someone else")]
	WaitingOnSomeoneElse = 32,
}
